
		--MULTIPLE JOIN OPERATIONS
SELECT FIRST_NAME,LAST_NAME,D.DEPARTMENT_NAME,CITY
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
JOIN LOCATIONS L
ON (L.LOCATION_ID = D.LOCATION_ID);





	--MULTIPLE JOIN USING DIFFERNET CLAUSES
SELECT FIRST_NAME,LAST_NAME,D.DEPARTMENT_NAME,CITY
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
JOIN LOCATIONS L
USING (LOCATION_ID);


SELECT FIRST_NAME,LAST_NAME,D.DEPARTMENT_NAME,CITY,POSTAL_CODE,STREET_ADDRESS
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
JOIN LOCATIONS L
USING (LOCATION_ID)
JOIN COUNTRIES
USING (COUNTRY_ID);




	--RESTRICTING JOINS
--WE CAN USE WHERE OR AND 
SELECT E.FIRST_NAME,E.LAST_NAME,D.DEPARTMENT_NAME,D.DEPARTMENT_ID,L.CITY
FROM EMPLOYEES E
JOIN DEPARTMENTS D 
ON(E.DEPARTMENT_ID = D.DEPARTMENT_ID)
JOIN LOCATIONS L
ON (D.LOCATION_ID = L.LOCATION_ID)
WHERE D.DEPARTMENT_ID=100;


SELECT E.FIRST_NAME,E.LAST_NAME,D.DEPARTMENT_NAME,D.DEPARTMENT_ID,L.CITY
FROM EMPLOYEES E
JOIN DEPARTMENTS D 
ON(E.DEPARTMENT_ID = D.DEPARTMENT_ID)
JOIN LOCATIONS L
ON (D.LOCATION_ID = L.LOCATION_ID)
AND D.DEPARTMENT_ID=100
AND E.JOB_ID='IT_PROG';




	--SELF JOIN
SELECT worker.FIRST_NAME,worker.LAST_NAME,worker.EMPLOYEE_ID,worker.MANAGER_ID,
manager.employee_id,manager.first_name,manager.last_name
FROM EMPLOYEES worker JOIN EMPLOYEES manager
ON (worker.manager_id = manager.employee_id);


SELECT worker.FIRST_NAME,worker.LAST_NAME,worker.EMPLOYEE_ID,worker.MANAGER_ID,
manager.employee_id,manager.first_name,manager.last_name,WORKER.SALARY,MANAGER.SALARY
FROM EMPLOYEES worker JOIN EMPLOYEES manager
ON (worker.manager_id = manager.employee_id);


		--NON EQUI JOINS 
SELECT E.EMPLOYEE_ID,E.FIRST_NAME,E.LAST_NAME,E.JOB_ID,E.SALARY,
J.MIN_SALARY,J.MAX_SALARY,J.JOB_ID
FROM EMPLOYEES E JOIN JOBS J
ON E.SALARY > J.MAX_SALARY
AND J.JOB_ID = 'SA_REP';


--EMPLOYEES HAVING SAME FIRSTNAME       
SELECT E1.EMPLOYEE_ID,E1.FIRST_NAME,E1.LAST_NAME
FROM EMPLOYEES E1 JOIN JOBS J1
ON E1.SALARY BETWEEEN J1.MIN_SALARY AND J1.MAX_SALARY;


--EMPLOYEES WHOSE SALARY IS BETWEEN MIN AND MAX SALARY  
SELECT E1.EMPLOYEE_ID,E1.FIRST_NAME,E1.LAST_NAME,J1.JOB_TITLE,J1.MIN_SALARY,J1.MAX_SALARY
FROM EMPLOYEES E1 JOIN JOBS J1
ON E1.SALARY BETWEEN J1.MIN_SALARY AND J1.MAX_SALARY;



--Computes a running total of a particular column using the Non-Equijoins
SELECT p1.payment_date, p1.payout_amount, SUM(p1.payout_amount) AS total_payout
FROM payouts p1 JOIN payouts p2
ON p1.payment_date >= p2.payment_date
AND p1.employee_id = p2.employee_id
WHERE p1.employee_id = 100
GROUP BY p1.payout_amount, p1.payment_date
ORDER BY p1.payment_date;


--LEFT OUTER JOIN 
SELECT FIRST_NAME,LAST_NAME,DEPARTMENT_ID,DEPARTMENT_NAME
FROM EMPLOYEES LEFT JOIN DEPARTMENTS
USING(DEPARTMENT_ID);


SELECT E.FIRST_NAME,E.LAST_NAME,D.DEPARTMENT_ID,D.DEPARTMENT_NAME
FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D
ON(E.DEPARTMENT_ID = D.DEPARTMENT_ID);

 
 
 
 --Rigth Outer Join
select first_name,last_name,department_name,e.department_id,d.department_id,location id 
from employees e RIGHT OUTER JOIN DEPARTMENTS d
ON(e.department_id = d.department_id)
RIGHT OUTER JOIN locations
USING(location_id);


-full outer join
select first_name,last_name,department_name,e.department_id,d.department_id,location id 
from employees e FULL OUTER JOIN DEPARTMENTS d
ON(e.department_id = d.department_id)
RIGHT OUTER JOIN locations


-- CROSS JOIN
SELECT FIRST_NAME,LAST_NAME,DEPARTMENT_NAME,JOB_TITLE
FROM EMPLOYEES CROSS JOIN DEPARTMENTS
CROSS JOIN JOBS
WHERE JOB_TITLE = 'Finance Manager';




--this query returns wrong results as count(*) returns 1 for every row returned even for null values 
select c.department_name,c.job_title,count(*) as employees_count
FROM 
(SELECT d.department_name,j.job_title,j.job_id,d.department_id
FROM departments d cross join jobs j) c
LEFT OUTER JOIN EMPLOYEES E
ON (E.JOB_ID = C.JOB_ID AND E.DEPARTMENT_ID = C.DEPARTMENT_ID)
GROUP BY C.DEPARTMENT_NAME,C.JOB_TITLE
ORDER BY C.DEPARTMENT_NAME,C.JOB_TITLE;




--corrected query 
select c.department_name,c.job_title,count(e.employee_id) as employees_count
FROM 
(SELECT d.department_name,j.job_title,j.job_id,d.department_id
FROM departments d cross join jobs j) c
LEFT OUTER JOIN EMPLOYEES E
ON (E.JOB_ID = C.JOB_ID AND E.DEPARTMENT_ID = C.DEPARTMENT_ID)
GROUP BY C.DEPARTMENT_NAME,C.JOB_TITLE
ORDER BY C.DEPARTMENT_NAME,C.JOB_TITLE;





